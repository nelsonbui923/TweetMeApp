{"version":3,"sources":["logo.svg","lookup/components.js","tweets/lookup.js","tweets/create.js","tweets/buttons.js","profiles/components.js","tweets/detail.js","tweets/list.js","tweets/feed.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","send","apiTweetFeed","nextUrl","undefined","replace","apiTweetList","username","TweetCreate","props","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","className","onSubmit","preventDefault","newVal","current","value","content","ref","required","type","ActionBtn","tweet","action","didPerformAction","likes","actionDisplay","display","handleActionBackendEvent","onClick","event","tweetId","id","apiTweetAction","UserLink","children","UserDisplay","user","includeFullName","hideLink","nameDisplay","first_name","last_name","Fragment","UserPicture","userIdSpan","ParentTweet","parent","Tweet","isRetweet","hideActions","reTweeter","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","ifDetail","handlePerformAction","newActionTweet","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","next","results","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","FeedList","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","Boolean","hostname","appEl","getElementById","tweetDetailEl","querySelectorAll","tweetsEl","tweetFeedEl","x","createElement","ReactDOM","render","dataset","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7b899d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      var cookies = document.cookie.split(';');\r\n      for (var i = 0; i < cookies.length; i++) {\r\n          var cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data){\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url = `http://localhost:8000/api${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method, url)\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n  if (csrftoken){\r\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n  }\r\n  \r\n  xhr.onload = function() {\r\n    if (xhr.status === 403 && xhr.response) {\r\n      const detail = xhr.response.detail\r\n      if (detail === \"Authentication credentials were not provided.\") {\r\n        if (window.location.href.indexOf(\"login\") === -1) {\r\n          window.location.href = \"/login?showLoginRequired=true\"\r\n        }\r\n      }\r\n    }\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function(e) {\r\n    callback({\"message\": \"the request was an error\"}, 400)\r\n  }\r\n  xhr.send(jsonData);\r\n}\r\n\r\n","import {backendLookup} from '../lookup';\r\n\r\nexport function apiTweetFeed(callback, nextUrl) {\r\n    let endpoint = \"/tweets/feed/\"\r\n    if (nextUrl !== null && nextUrl !== undefined) {\r\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\r\n    }\r\n    backendLookup(\"GET\", endpoint, callback)\r\n}\r\n\r\nexport function apiTweetCreate(newTweet, callback) {\r\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\r\n}\r\n\r\nexport function apiTweetAction(tweetId, action, callback) {\r\n    const data = {id: tweetId, action: action}\r\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\r\n}\r\n  \r\nexport function apiTweetDetail(tweetId, callback) {\r\n    backendLookup(\"GET\", `/tweets/${tweetId}`, callback)\r\n}\r\n  \r\nexport function apiTweetList(username, callback, nextUrl) {\r\n    let endpoint = \"/tweets/\"\r\n    if(username) {\r\n        endpoint = `/tweets/?username=${username}`\r\n    }\r\n    if (nextUrl !== null && nextUrl !== undefined) {\r\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\r\n    }\r\n    backendLookup(\"GET\", endpoint, callback)\r\n}\r\n  ","import React from 'react';\r\nimport {apiTweetCreate} from './lookup';\r\n\r\n\r\nexport function TweetCreate(props) {\r\n    const textAreaRef = React.createRef()\r\n    const {didTweet} = props\r\n    const handleBackendUpdate = (response, status) => {\r\n        if(status === 201) {\r\n            didTweet(response)\r\n        } else {\r\n           alert(\"An error occured. Please try again.\") \r\n        }\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newVal = textAreaRef.current.value;\r\n        apiTweetCreate(newVal, handleBackendUpdate)\r\n        textAreaRef.current.value = '';\r\n    }\r\n    return (\r\n        <div className={props.className}>\r\n            <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n            </textarea>\r\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {apiTweetAction} from './lookup';\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action, didPerformAction} = props;\r\n    const likes = tweet.likes ? tweet.likes : 0;\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm';\r\n    const actionDisplay = action.display ? action.display : 'Action';\r\n    const handleActionBackendEvent = (response, status) => {\r\n        if ((status === 200 || status === 201) && didPerformAction) {\r\n            // setLikes(response.likes)\r\n            didPerformAction(response, status)\r\n            // setUserLike(true)\r\n        }\r\n    }\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}\r\n  ","\r\nimport React from 'react'\r\n\r\nexport function UserLink (props) {\r\n  const {username} = props\r\n  const handleUserLink = (event) => {\r\n    window.location.href= `/profiles/${username}`\r\n  }\r\n  return <span className='pointer' onClick={handleUserLink}>\r\n      {props.children}\r\n  </span>\r\n}\r\n\r\n\r\nexport  function UserDisplay(props){\r\n  const {user, includeFullName, hideLink} = props\r\n  const nameDisplay = includeFullName === true ? `${user.first_name} ${user.last_name} ` : null\r\n  return <React.Fragment>\r\n    {nameDisplay}\r\n    {hideLink === true ? `@${user.username}` : <UserLink username={user.username}>@{user.username}</UserLink>}\r\n  </React.Fragment>\r\n}\r\n\r\nexport  function UserPicture (props) {\r\n  const {user, hideLink} = props\r\n  const userIdSpan = <span className='mx-1 px-3 py-2 rounded-circle bg-dark text-white'>\r\n  {user.username[0]}\r\n</span>\r\n  return  hideLink === true ? userIdSpan : <UserLink username={user.username}>{userIdSpan}</UserLink>\r\n}","import React, {useState} from 'react';\r\nimport {ActionBtn} from './buttons'\r\nimport {UserPicture, UserDisplay, UserLink} from '../profiles'\r\n\r\nexport function ParentTweet(props) {\r\n    const {tweet} = props\r\n    return tweet.parent ? <Tweet isRetweet hideActions reTweeter={props.reTweeter} className={' '} tweet={tweet.parent} /> : null\r\n}\r\n\r\nexport function Tweet(props) {\r\n    const {tweet, didRetweet, hideActions, isRetweet, reTweeter} = props;\r\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\r\n    const handleLink = (e) => {\r\n      e.preventDefault()\r\n      window.location.href = `/${tweet.id}`\r\n    }\r\n    \r\n    const path = window.location.pathname\r\n    const match = path.match(/(?<tweetid>\\d+)/)\r\n    const urlTweetId = match ? match.groups.tweetid : -1\r\n    \r\n    const ifDetail = `${tweet.id}` === `${urlTweetId}`\r\n    let className = props.className ? props.className : 'col-10 mx-auto col-md-6';\r\n    className = isRetweet === true ? `${className} p-2 border rounded` : className\r\n\r\n    const handlePerformAction = (newActionTweet, status) => {\r\n        if(status === 200) {\r\n            setActionTweet(newActionTweet)\r\n        } else if (status === 201) {\r\n            if(didRetweet) {\r\n                didRetweet(newActionTweet)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n      <div className={className}>\r\n        {isRetweet === true && <div className=\"mb-2\"><span className=\"small text-muted\">Retweeted via <UserLink user={reTweeter} /></span></div>}\r\n        <div className=\"d-flex\">\r\n          <div className=\"\">\r\n            <UserPicture user={tweet.user} />\r\n          </div>\r\n          <div className=\"col-11\">\r\n            <div>\r\n              <p>\r\n                <UserDisplay includeFullName user={tweet.user} />\r\n              </p>\r\n              <p>{tweet.content}</p>\r\n              <ParentTweet tweet={tweet} reTweeter={tweet.user}/>\r\n            </div>\r\n            <div className='btn btn-group px-0'>\r\n            {(actionTweet && hideActions !== true) && <React.Fragment>\r\n              <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"like\", display:\"Likes\"}}/>\r\n              <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"unlike\", display:\"Unlike\"}}/>\r\n              <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"retweet\", display:\"Retweet\"}}/>\r\n            </React.Fragment>\r\n            }\r\n            {ifDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {apiTweetList} from './lookup';\r\nimport {Tweet} from './detail';\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([]);\r\n    const [nextUrl, setNextUrl] = useState(null);\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit);\r\n        if(final.length !== tweets.length) {\r\n            setTweets(final);\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n        if (tweetsDidSet === false) {\r\n            const handleTweetListLookup = (response, status) => {\r\n                if(status === 200) {\r\n                    setNextUrl(response.next)\r\n                    setTweetsInit(response.results)\r\n                    setTweetsDidSet(true)\r\n                } else {\r\n                    alert(\"There was an error\")\r\n                }\r\n            }\r\n            apiTweetList(props.username, handleTweetListLookup);\r\n        }\r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        const updateTweetsInit = [...tweetsInit]\r\n        updateTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updateTweetsInit)\r\n        const updateFinalTweets = [...tweets]\r\n        updateFinalTweets.unshift(tweets)\r\n        setTweets(updateFinalTweets)\r\n    }\r\n\r\n    const handleLoadNext = (e) => {\r\n        e.preventDefault()\r\n        if(!nextUrl !== null) {\r\n            const handleLoadNextResponse = (response, status) => {\r\n                if(status === 200) {\r\n                    setNextUrl(response.next)\r\n                    const newTweets = [...tweets].concat(response.results)\r\n                    setTweetsInit(newTweets)\r\n                    setTweets(newTweets)\r\n                } else {\r\n                    alert(\"There was an error\")\r\n                }\r\n            }\r\n            apiTweetList(props.username, handleLoadNextResponse, nextUrl)\r\n        }\r\n    }\r\n    \r\n    return <React.Fragment>{tweets.map((item, index) => {\r\n      return <Tweet \r\n      tweet={item}\r\n      didRetweet={handleDidRetweet} \r\n      className='my-5 py-5 border bg-white text-dark' \r\n      key={`${index}-{item.id}`} \r\n      />\r\n    })}\r\n    { nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load More Tweets</button>}\r\n    </React.Fragment>\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {apiTweetFeed} from './lookup';\r\nimport {Tweet} from './detail';\r\n\r\nexport function FeedList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([]);\r\n    const [nextUrl, setNextUrl] = useState(null);\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit);\r\n        if(final.length !== tweets.length) {\r\n            setTweets(final);\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n        if (tweetsDidSet === false) {\r\n            const handleTweetListLookup = (response, status) => {\r\n                if(status === 200) {\r\n                    setNextUrl(response.next)\r\n                    setTweetsInit(response.results)\r\n                    setTweetsDidSet(true)\r\n                }\r\n            }\r\n            apiTweetFeed(handleTweetListLookup);\r\n        }\r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        const updateTweetsInit = [...tweetsInit]\r\n        updateTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updateTweetsInit)\r\n        const updateFinalTweets = [...tweets]\r\n        updateFinalTweets.unshift(tweets)\r\n        setTweets(updateFinalTweets)\r\n    }\r\n\r\n    const handleLoadNext = (e) => {\r\n        e.preventDefault()\r\n        if(!nextUrl !== null) {\r\n            const handleLoadNextResponse = (response, status) => {\r\n                if(status === 200) {\r\n                    setNextUrl(response.next)\r\n                    const newTweets = [...tweets].concat(response.results)\r\n                    setTweetsInit(newTweets)\r\n                    setTweets(newTweets)\r\n                }\r\n            }\r\n            apiTweetFeed(handleLoadNextResponse, nextUrl)\r\n        }\r\n    }\r\n    \r\n    return <React.Fragment>{tweets.map((item, index) => {\r\n      return <Tweet \r\n      tweet={item}\r\n      didRetweet={handleDidRetweet} \r\n      className='my-5 py-5 border bg-white text-dark' \r\n      key={`${index}-{item.id}`} \r\n      />\r\n    })}\r\n    { nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load More Tweets</button>}\r\n    </React.Fragment>\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {TweetCreate} from './create';\r\nimport {TweetsList} from './list';\r\nimport {apiTweetDetail} from './lookup';\r\nimport {Tweet} from './detail';\r\nimport {FeedList} from './feed';\r\n\r\n\r\n\r\nexport function FeedComponent(props) {\r\n  const [newTweets, setNewTweets] = useState([])\r\n  const canTweet = props.canTweet === \"false\" ? false : true\r\n  const handleNewTweet = (newTweet) =>{\r\n    let tempNewTweets = [...newTweets]\r\n    tempNewTweets.unshift(newTweet)\r\n    setNewTweets(tempNewTweets)\r\n  }\r\n  return <div className={props.className}>\r\n          {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\r\n        <FeedList newTweets={newTweets} {...props} />\r\n  </div>\r\n}\r\n\r\nexport function TweetsComponent(props) {\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const canTweet = props.canTweet === \"false\" ? false : true\r\n    const handleNewTweet = (newTweet) => {\r\n        let tempNewTweets = [...newTweets];\r\n        tempNewTweets.unshift(newTweet)\r\n        setNewTweets(tempNewTweets)\r\n    }\r\n    return (\r\n        <div className = {props.className}>\r\n            {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3'/>}\r\n            <TweetsList {...props} newTweets={newTweets}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function TweetDetailComponent(props){\r\n    const {tweetId} = props\r\n    const [didLookup, setDidLookup] = useState(false)\r\n    const [tweet, setTweet] = useState(null)\r\n  \r\n    const handleBackendLookup = (response, status) => {\r\n      if (status === 200) {\r\n        setTweet(response)\r\n      } else {\r\n        alert(\"There was an error finding your tweet.\")\r\n      }\r\n    }\r\n    useEffect(()=>{\r\n      if (didLookup === false){\r\n  \r\n        apiTweetDetail(tweetId, handleBackendLookup)\r\n        setDidLookup(true)\r\n      }\r\n    }, [tweetId, didLookup, setDidLookup])\r\n  \r\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\r\n   }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\nfunction loadTweets(callback) {\n  const xhr = new XMLHttpRequest();\n  const method = 'GET';\n  const url = \"http://localhost:8000/api/tweets/\";\n  const responseType = \"json\";\n\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n  xhr.onload = function() {\n    callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = function(e) {\n    callback({\"message\": \"the request was an error\"}, 400)\n  }\n  xhr.send();\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent/>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { FeedComponent, TweetsComponent, TweetDetailComponent } from './tweets';\n\nconst appEl = document.getElementById('root');\nconst tweetDetailEl = document.querySelectorAll(\".tweetme-detail\")\nconst tweetsEl = document.getElementById(\"tweetme\")\nconst tweetFeedEl = document.getElementById(\"tweetme-feed\")\nconst x = React.createElement\n\nif(appEl) {\n  ReactDOM.render(<App/>, appEl);\n}\n\nif(tweetsEl) {\n  ReactDOM.render(x(TweetsComponent, tweetsEl.dataset), tweetsEl)\n}\n\nif(tweetFeedEl) {\n  ReactDOM.render(x(FeedComponent, tweetFeedEl.dataset), tweetFeedEl)\n}\n\ntweetDetailEl.forEach(container => {\n  ReactDOM.render(x(TweetDetailComponent, container.dataset), container)\n})\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}