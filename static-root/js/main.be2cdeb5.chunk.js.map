{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","e","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","event","App","src","logo","alt","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be2cdeb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react';\r\nimport {loadTweets} from '../lookup';\r\n\r\nexport function TweetsComponent(props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newVal = textAreaRef.current.value;\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 123123,\r\n        })\r\n        setNewTweets(tempNewTweets)\r\n        textAreaRef.current.value = '';\r\n        \r\n    }\r\n    return (\r\n        <div className = {props.className}>\r\n            <div className='col-12 mb-3'>\r\n                <form onSubmit={handleSubmit}>\r\n                    <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n                    </textarea>\r\n                    <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n                </form>\r\n            </div>\r\n            <TweetsList newTweets={newTweets}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([]);\r\n    // setTweetsInit([...props.newTweets].concat(tweetsInit))\r\n    useEffect(() => {\r\n        let final = [...props.newTweets].concat(tweetsInit);\r\n        if(final.length !== tweets.length) {\r\n            setTweets(final);\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n    useEffect(() => {\r\n      const myCallback = (response, status) => {\r\n        if(status === 200) {\r\n            setTweetsInit(response);\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n      };\r\n      loadTweets(myCallback);\r\n    }, [tweetsInit])\r\n    return tweets.map((item, index) => {\r\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\r\n    })\r\n}\r\n  \r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action} = props;\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\r\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false);\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm';\r\n    const actionDisplay = action.display ? action.display : 'Action';\r\n    \r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        if (action.type === 'like') {\r\n            if (userLike === true) {\r\n                setLikes(likes - 1)\r\n                setUserLike(false)\r\n            } else {\r\n                setLikes(likes + 1)\r\n                setUserLike(true)\r\n            }\r\n        }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n  \r\nexport function Tweet(props) {\r\n    const {tweet} = props;\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\r\n    return (\r\n      <div className={className}>\r\n        <p>{tweet.id} - {tweet.content}</p>\r\n        <div className='btn btn-group'>\r\n          <ActionBtn tweet={tweet} action={{type:\"like\", display:\"Likes\"}}/>\r\n          <ActionBtn tweet={tweet} action={{type:\"unlike\", display:\"Unlike\"}}/>\r\n          <ActionBtn tweet={tweet} action={{type:\"retweet\", display:\"Retweet\"}}/>\r\n        </div>\r\n      </div>\r\n  \r\n    )\r\n}","\r\nexport function loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest();\r\n    const method = 'GET';\r\n    const url = \"http://localhost:8000/api/tweets/\";\r\n    const responseType = \"json\";\r\n  \r\n    xhr.responseType = responseType;\r\n    xhr.open(method, url);\r\n    xhr.onload = function() {\r\n      callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function(e) {\r\n      callback({\"message\": \"the request was an error\"}, 400)\r\n    }\r\n    xhr.send();\r\n};\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\nfunction loadTweets(callback) {\n  const xhr = new XMLHttpRequest();\n  const method = 'GET';\n  const url = \"http://localhost:8000/api/tweets/\";\n  const responseType = \"json\";\n\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n  xhr.onload = function() {\n    callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = function(e) {\n    callback({\"message\": \"the request was an error\"}, 400)\n  }\n  xhr.send();\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent/>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetsComponent } from './tweets';\n\nconst appEl = document.getElementById('root');\nif(appEl) {\n  ReactDOM.render(<App/>, appEl);\n}\nconst tweetsEl = document.getElementById(\"tweetme\")\nif(tweetsEl) {\n  ReactDOM.render(<TweetsComponent/>, tweetsEl)\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}